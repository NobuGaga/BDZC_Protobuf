syntax = "proto2";
option optimize_for = LITE_RUNTIME;
import "PCommon.proto";
package PCrossOccupy;

//系统id: 跨服楼盘抢夺 CrossOccupy = 146,
// local CMD_ID = 
// {
// 	cOpenUI = 1,		--打开界面请求
// 	cOpenBuilding = 2,	--打开建筑物: PCrossOccupy.COpenBuilding
// 	cFight = 3,			--请求战斗: PCrossOccupy.CFight, 如果玩家不在本建筑中, 则给出提示, 并重新刷新建筑列表
// 	cRevenge = 4,		--请求复仇: PCrossOccupy.CFight
// 	cMessage = 5,		--请求查看防守记录
// 	cOpenShop = 6,		--点击商店按钮
// 	cShopExchange = 7,	--请求兑换物品: PCrossOccupy.CExchange
// 	cShopRefresh = 8,	--手动刷新商店
// 	cShopRefreshAuto = 9,--定时时间到, 定时刷新商店, 在商店界面中调用
// 	cFightBuy = 10,		--购买挑战次数
// 	cCloseUI = 11,		--关闭界面
// 	cInfoRefreshAuto = 12,--定时时间到, 定时刷新我的信息
// 	cOccupy = 13,		--点击那些空位置进行占领 PCrossOccupy.COccupyBuilding

// 	sInit = 1,			--进入游戏初始化: PCrossOccupy.SInit
// 	sUpdateState = 2,	--刷新活动状态: PCrossOccupy.SState
// 	sUpdateInfo = 3,	--刷新我的挑战信息: PCrossOccupy.SInfo 12点重置等时候刷新
// 	sOpenUI = 4,		--打开界面返回: PCrossOccupy.SOpenUI 
// 	sUpdateUI = 5,		--刷新建筑列表: PCrossOccupy.SOpenUI 只有在界面内有效
// 	sOpenBuilding = 6,	--打开建筑物返回: PCrossOccupy.SBuilding
// 	sFight = 7,			--请求挑战返回: PCrossOccupy.SFight
// 	sRevenge = 8,		--请求复仇返回: PCrossOccupy.SFight
// 	sMessage = 9,		--请求防守信息返回: PCrossOccupy.SList
// 	sOpenShop = 10,		--请求商店信息返回: PCrossOccupy.SShop
// 	sShopExchange = 11,	--请求商店兑换返回: PCrossOccupy.SExchange
// 	sShopRefresh = 12,	--手动商店刷新返回: PCrossOccupy.SShop
// 	sShopRefreshAuto = 13,--自动定时商店刷新返回: PCrossOccupy.SShop
// 	sFightBuy = 14,		--战斗次数购买返回: PCrossOccupy.SInfo
// 	sInfoRefreshAuto = 15,--定时刷新我的信息: PCrossOccupy.SInfo 倒计时时间到
// 	sOccupy = 16,		--点击那些空位置进行占领: PCrossOccupy.SOccupy
// }

//////////////////////////////////
// Client -- Server
//////////////////////////////////
//请求战斗, 如果玩家不在本建筑中, 则给出提示, 并重新刷新建筑列表
message CFight
{
	required int32 buildingId = 1;	//建筑物id
	required int32 playerid = 2;	//玩家id
	required int32 oriServerId = 3; //玩家源服id
}
//打开建筑物, 返回建筑物内玩家列表
message COpenBuilding
{
	required int32 buildingId = 1;	//建筑物id
}
//兑换物品
message CExchange
{
	required int32 	id = 1;
}
//占领
message COccupyBuilding
{
	required int32 buildingId = 1;	//建筑物id
}
//////////////////////////////////
// Server -- Client
//////////////////////////////////
//状态
message SState
{
	required int32 actId = 1;			//活动id
	required int32 state = 2;			//活动状态 1未开始、2进行中 3已结束 4关闭
	optional int32 starttime = 3;		//开启时间
	optional int32 endtime = 4;			//关闭时间
}
//我的相关信息
message SInfo
{
	required int32 	fightTimes = 1;	//可战斗次数
	required int32 	buyTimes = 2;	//购买战斗次数
	optional int64 	refreshTime = 3;//下次刷新战斗次数的时间戳(当战斗次数已满时忽略)
	required int32 myBuild = 4;		//我的建筑ID, 没有为0
}
//玩家信息
message PPlayerInfo
{
	required int32 id = 1;		//玩家id
	required string name = 2;	//名称
	required int32 head = 3;    //头部
	required int32 body = 4;    //身体
	required int32 sex = 5;		//性别
	required int64 force = 6;	//战力
	required int32 level = 7;	//等级
	optional int32 chatBg = 8; 	//聊天和头像框ID
	optional int32 title = 9;	//称号(一个)
	optional int32 building = 10;//建筑id
	optional int32 occupyTime = 11;//占领时间戳
	optional int32 fightTime = 12;//欺负我的时间, 复仇界面使用
	optional int32 vip = 13;	//VIP值
	required int32 oriServerId = 14;//源服id
}
//最牛逼的建筑
message PGoodBuilding
{
	required int32 id = 1;				//建筑id
	optional int32 playerId = 2;		//玩家id
	optional string playerName = 3;		//名称
	optional int32 playerTitle = 4;		//称号(一个)
}
//普通建筑
message PCommonBuilding
{
	required int32 id = 1;				//建筑id
	required int32 num = 2;				//已占领数量
}
//进入游戏初始化
message SInit
{
	required bool isShopOpen = 1;		//商店是否开启
	optional SState state = 2;			//活动状态
	optional SInfo myInfo = 3;			//我的相关信息, 只有在有活动的时候有效, 用来做小红点显示	
}
//打开楼盘界面, 请求本界面信息(只有在开启状态才会请求)
message SOpenUI
{
	repeated PGoodBuilding goodList = 1;	//前3名建筑列表 
	repeated PCommonBuilding commonList = 2;//其他建筑列表
}
//玩家列表: 复仇列表, 建筑占用玩家列表
message SList
{
	repeated PPlayerInfo list = 1;
}
//点击建筑物返回
message SBuilding
{
	required int32 id = 1;				//建筑id
	repeated PPlayerInfo list = 2;		//建筑物的玩家列表
}
//我的商店信息
message SShop
{
	required int32 score = 1;			//商店下次刷新时间
	repeated PIntInt shop = 2;			//兑换商店
	required int32 shopTimes = 3;		//商店手动刷新次数
	required int32 refreshTime	= 4;	//商店下次刷新时间
	optional int32 refreshCost	= 5;	//商店手动刷新消耗
	optional int32 maxTimes	= 6;		//手动刷新的最大次数
}
//商品兑换返回
message SExchange
{
	required int32 id = 1;				//商店表id
	required int32 lessTimes = 2;		//此id的剩余兑换次数
	required int32 socre = 3;			//积分
}
//战斗返回, 如果SOpenUI的信息有变化, 则也进行刷新
message SFight
{
	required bool isSuccess = 1;		//是否胜利
	required SFightPVP fightInfo = 2; 	//战斗信息
	required int32 buildId = 3;			//挑战的建筑ID
}
//点击占领后返回
message SOccupy
{
	required int32 myBuild = 1;			//我占领的建筑ID
}
